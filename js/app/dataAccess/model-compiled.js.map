{"version":3,"sources":["model.js"],"names":[],"mappings":"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","file":"model-compiled.js","sourcesContent":["/**\n * Created by udaltsov on 29.10.15.\n */\n\"use strict\";\n\ndefine([\n    \"esri/layers/FeatureLayer\",\n    \"esri/tasks/query\",\n    \"esri/graphic\",\n    \"esri/geometry/Point\",\n    \"esri/geometry/Polyline\",\n    \"esri/SpatialReference\",\n    \"esri/request\",\n    \"dojo/_base/declare\",\n    \"dojo/_base/lang\",\n    \"dojo/promise/all\"\n  ],\n  function (FeatureLayer,\n            Query,\n            Graphic,\n            Point,\n            Polyline,\n            SpatialReference,\n            esriRequest,\n            declare,\n            lang,\n            promisesAll) {\n    \n    function protoFeature() {\n      return {\n        geometry:   null,\n        attributes: {\n          _PROTO_INDICATOR: true\n        }\n      }\n    }\n    \n    var model;\n    model = declare(null, {\n      url:         \"\",\n      className:   \"\",\n      classAlias:  \"\",\n      usage:       \"\",\n      map:         null,\n      constructor: function (config) {\n        this.url = config.url;\n        this.className = config.className;\n        this.classAlias = config.classAlias;\n        this.usage = config.usage;\n        this.map = config.map;\n        \n        /**\n         *\n         * @param parentClassName\n         * @param chieldClassName\n         * @param parentMRID\n         * @param chieldMRID\n         * @returns {string}\n         */\n        this.containerWhere = function (parentClassName, chieldClassName, parentMRID, chieldMRID) {\n          var where = \"parentClassName='\" + parentClassName + \"' AND \" + \"chieldClassName='\" + chieldClassName + \"'\";\n          if (parentMRID != null) where += \" AND parentMRID=\" + parentMRID;\n          if (chieldMRID != null) where += \" AND chieldMRID=\" + chieldMRID;\n          return where;\n        };\n        \n        /**\n         * обобщенный метод для получения promise для создания объекта в сервисе esri\n         * @param data\n         * @returns {*}\n         */\n        this.add = function (data) {\n          var attributes = data.attributes;\n          var geometry = data.geometry;\n          var graphic = new Graphic(geometry, null, attributes, null);\n          if ((graphic.geometry === null) || (graphic.attributes === null)) {\n            var _geometry = null;\n            try {\n              switch (data.attributes.geometryType) {\n                case \"point\":\n                  if ((data.geometry.x !== undefined) || (data.geometry.y !== undefined)) {\n                    _geometry = new Point(data.geometry.x, data.geometry.y, new SpatialReference(102100));\n                  }\n                  break;\n                case \"polyline\":\n                  if (data.geometry.paths !== undefined) {\n                    _geometry = new Polyline(new SpatialReference({wkid: 102100}));\n                    for (var i = 0; i < data.geometry.paths.length; i++) {\n                      _geometry.addPath(data.geometry.paths[i]);\n                    }\n                  }\n              }\n            }\n            catch (e) {\n            }\n            \n            graphic = new Graphic(_geometry, null, attributes, null);\n          }\n          var layer = new FeatureLayer(this.url);\n          //noinspection JSUnresolvedFunction\n          return layer.applyEdits([graphic], [], []).promise;\n        };\n        \n        /**\n         *\n         * @param data\n         * @returns {*}\n         */\n        this.addArray = function (data) {\n          var layer = new FeatureLayer(this.url);\n          var graphics = [];\n          for (var i = 0; i < data.length; i++) {\n            var attributes = data[i].attributes;\n            var geometry = data[i].geometry;\n            var graphic = new Graphic(geometry, null, attributes, null);\n            graphics.push(graphic);\n          }\n          //noinspection JSUnresolvedFunction\n          return layer.applyEdits(graphics, null, null).promise;\n        };\n        \n        /**\n         * @comment обобщенный метод для получения promise для чтения объекта в сервисе esri;\n         * @comment позволяет выполнить запрос с учетом where (без учета геометрии);\n         * @comment возвращает обещание (promise), для получения ответа необходимо использовать конструкцию вида\n         * @comment classObject.get({where: \"1=1\"}).then(function(result) { ОБРАБАТЫВАЕМ ПОЛЕЗНЫЙ РЕЗУЛЬТАТ}, function(error) { ОБРАБАТЫВАЕМ ОШИБКИ })\n         * @param data\n         * @param data.where\n         * @param data.num\n         * @returns {*}\n         */\n        this.get = function (data) {\n          var layer = new FeatureLayer(this.url);\n          var query = new Query();\n          query.where = data.where;\n          if (data.num) query.num = data.num;\n          query.returnGeometry = true;\n          query.outFields = ['*'];\n          /** @namespace data.orderByFields */\n          if (data.orderByFields) query.orderByFields = data.orderByFields;\n          return layer.queryFeatures(query).promise;\n        };\n        \n        /**\n         * @comment обобщенный метод для получения promise для чтения словаря из сервиса esri;\n         * @comment позволяет выполнить запрос с учетом where (не возвращает геометрию объекта);\n         * @comment возвращает обещание (promise), для получения ответа необходимо использовать конструкцию вида\n         * @comment classObject.get({where: \"1=1\"}).then(function(result) { ОБРАБАТЫВАЕМ ПОЛЕЗНЫЙ РЕЗУЛЬТАТ}, function(error) { ОБРАБАТЫВАЕМ ОШИБКИ })\n         * @param data\n         * @param data.where - условие\n         * @param fields - возвращаемые поля\n         * @returns {*}\n         */\n        this.getDictionary = function (data, fields) {\n          var layer = new FeatureLayer(this.url);\n          var query = new Query();\n          query.where = data.where === undefined ? \"1=1\" : data.where;\n          query.orderByFields = fields;\n          query.returnGeometry = false;\n          query.outFields = fields;\n          query.returnDistinctValues = true;\n          return layer.queryFeatures(query).promise;\n        };\n        \n        /**\n         * @comment обобщенный метод для получения promise для выполнения запроса с учетом входящего геометрического фильтра из сервиса esri;\n         * @comment позволяет выполнить запрос с учетом where и geometry;\n         * @comment возвращает обещание (promise), для получения ответа необходимо использовать конструкцию вида\n         * @comment classObject\n         * @comment   .getByGeometry({where: \"1=1\", geometry: feature.geometry})\n         * @comment   .then(function(result) { ОБРАБАТЫВАЕМ ПОЛЕЗНЫЙ РЕЗУЛЬТАТ}, function(error) { ОБРАБАТЫВАЕМ ОШИБКИ })\n         * @param data\n         * @param data.where\n         * @param data.geometry\n         * @param data.distance\n         * @returns {*}\n         */\n        this.getByGeometry = function (data) {\n          var layer = new FeatureLayer(this.url);\n          var query = new Query();\n          query.where = data.where;\n          if (data.geometry) query.geometry = data.geometry;\n          query.returnGeometry = true;\n          //экспериментальное значение\n          query.distance = 1;\n          if (data.distance != undefined) query.distance = data.distance;\n          query.outFields = ['*'];\n          return layer.queryFeatures(query).promise;\n        };\n        \n        /**\n         * обобщенный метод для получения promise для чтения объекта в сервисе esri\n         * @param id\n         * @returns {*}\n         */\n        this.getById = function (id) {\n          var layer = new FeatureLayer(this.url);\n          var query = new Query();\n          query.where = \"OBJECTID = \" + id;\n          query.returnGeometry = true;\n          query.outFields = ['*'];\n          return layer.queryFeatures(query).promise;\n        };\n        \n        /**\n         * @comment обобщенный метод для получения promise для выполнения запроса с учетом входящего фильтра из сервиса\n         * @comment возвращает обещание (promise), для получения ответа необходимо использовать конструкцию вида\n         * @comment classObject\n         * @comment   .getByData({where: \"1=1\"})\n         * @comment   .then(function(result) { ОБРАБАТЫВАЕМ ПОЛЕЗНЫЙ РЕЗУЛЬТАТ}, function(error) { ОБРАБАТЫВАЕМ ОШИБКИ })\n         * @param data\n         * @param data.where\n         * @returns {*}\n         */\n        this.getByData = function (data) {\n          var layer = new FeatureLayer(this.url);\n          var query = new Query();\n          query.where = \"OBJECTID = \" + data[0][0][\"objectId\"];\n          query.returnGeometry = true;\n          query.outFields = ['*'];\n          return layer.queryFeatures(query).promise;\n        };\n        \n        /**\n         * @comment обобщенный метод для получения promise для выполнения запроса с учетом входящего фильтра из сервиса\n         * @comment возвращает обещание (promise), для получения ответа необходимо использовать конструкцию вида\n         * @comment classObject\n         * @comment   .getByArray([1, 2, 4, 12, 400, 422])\n         * @comment   .then(function(result) { ОБРАБАТЫВАЕМ ПОЛЕЗНЫЙ РЕЗУЛЬТАТ}, function(error) { ОБРАБАТЫВАЕМ ОШИБКИ })\n         * @param data - массив значений OBJECTID\n         * @returns {*}\n         */\n        this.getByArray = function (data) {\n          var layer = new FeatureLayer(this.url);\n          var query = new Query();\n          var where = \"OBJECTID = -1\";\n          if (data.length > 0) {\n            where = data.join(\" OR OBJECTID = \");\n            where = \"OBJECTID = \" + where;\n          }\n          query.where = where;\n          query.returnGeometry = true;\n          query.outFields = ['*'];\n          return layer.queryFeatures(query).promise;\n        };\n        \n        /**\n         * @comment многопоточный запрос, пока не используется, находится в стадии рассмотрения\n         * @param data\n         * @param data.candidates\n         * @param data.where\n         * @returns {*}\n         */\n        this.getMultiple = function (data) {\n          var query = new Query();\n          if (data.where !== undefined) query.where = data.where;\n          var candidates = data.candidates;\n          var queries = [];\n          for (var i = 0; i < candidates.length; i++) {\n            queries.push(candidates[i].queryFeatures(query));\n          }\n          return promisesAll(queries).promise;\n        };\n        \n        this.getIds = function (data) {\n          var layer = new FeatureLayer(this.url);\n          var query = new Query();\n          query.where = data.where !== undefined ? data.where : \"1=1\";\n          //noinspection JSUnresolvedFunction\n          return layer.queryIds(query).promise;\n        };\n        \n        /**\n         * обобщенный метод для получения promise для обновления объекта в сервисе esri\n         * @comment classObject\n         * @comment   .set(updatedFeature)\n         * @comment   .then(function(result) { ОБРАБАТЫВАЕМ ПОЛЕЗНЫЙ РЕЗУЛЬТАТ}, function(error) { ОБРАБАТЫВАЕМ ОШИБКИ })\n         * @param data\n         * @returns {*}\n         */\n        this.set = function (data) {\n          var attributes = lang.clone(data.attributes);\n          var geometry = lang.clone(data.geometry);\n          var graphic = {\n            attributes: attributes,\n            geometry:   geometry\n          };\n          graphic = JSON.stringify(graphic);\n          var url = this.url + \"/updateFeatures\";\n          return $.post(url, {\n            features: \"[\" + graphic + \"]\",\n            f:        \"json\"\n          }).done();\n        };\n        \n        /**\n         * обобщенный метод для получения promise для обновления объекта в сервисе esri\n         * @comment classObject\n         * @comment   .setArray([feature1, feature2])\n         * @comment   .then(function(result) { ОБРАБАТЫВАЕМ ПОЛЕЗНЫЙ РЕЗУЛЬТАТ}, function(error) { ОБРАБАТЫВАЕМ ОШИБКИ })\n         * @param data\n         * @returns {*}\n         */\n        this.setArray = function (data) {\n          var result = [];\n          for (var i = 0; i < data.length; i++) {\n            var item = data[i];\n            var attributes = lang.clone(item.attributes);\n            var geometry = lang.clone(item.geometry);\n            var graphic = {\n              attributes: attributes,\n              geometry:   geometry\n            };\n            graphic = JSON.stringify(graphic);\n            result.push(graphic);\n          }\n          result = result.join(\",\");\n          result = \"[\" + result + \"]\";\n          var url = this.url + \"/updateFeatures\";\n          return $.post(url, {\n            features: result,\n            f:        \"json\"\n          }).done();\n        };\n        \n        /**\n         * обобщенный метод для получения promise для обновления объекта в сервисе esri\n         * @comment classObject\n         * @comment   .update(updatedFeature)\n         * @comment   .then(function(result) { ОБРАБАТЫВАЕМ ПОЛЕЗНЫЙ РЕЗУЛЬТАТ}, function(error) { ОБРАБАТЫВАЕМ ОШИБКИ })\n         * @param data\n         * @returns {*}\n         */\n        this.update = function (data) {\n          var attributes = data.attributes;\n          var geometry = data.geometry;\n          var graphic = new Graphic(geometry, null, attributes, null);\n          var layer = new FeatureLayer(this.url);\n          //noinspection JSUnresolvedFunction\n          return layer.applyEdits(null, [graphic], null).promise;\n        };\n        \n        /**\n         * обобщенный метод для приведения геометрии объектов к целевой геометрии\n         * @comment classObject\n         * @comment   .set(updatedFeature)\n         * @comment   .then(function(result) { ОБРАБАТЫВАЕМ ПОЛЕЗНЫЙ РЕЗУЛЬТАТ}, function(error) { ОБРАБАТЫВАЕМ ОШИБКИ })\n         * @param features - коллекция входных объектов\n         * @param geometry - целевая геометрия\n         * @returns {*}\n         */\n        this.updateFeaturesGeometry = function (features, geometry) {\n          for (var i = 0; i < features.length; i++) {\n            features[i].geometry = geometry;\n          }\n          return features;\n        };\n        \n        /**\n         * обобщенный метод для получения promise для удаления объекта в сервисе esri\n         * @param data\n         * @param data.where - условие для отбора удаляемых объектов\n         * @returns {*}\n         */\n        this.del = function (data) {\n          return $.post(this.url + \"/deleteFeatures\", {where: data.where}).promise();\n        };\n        \n        /**\n         * обобщенный метод для получения promise для удаления объекта в сервисе esri\n         * @param data - коллекция id удаляемых объектов\n         * @returns {*}\n         */\n        this.delByArray = function (data) {\n          if ((data == null) || (data === undefined) || (data == [])) {\n            return $.post(this.url + \"/deleteFeatures\", {where: \"OBJECTID = -1\"}).promise();\n          }\n          var where = data.join(\" OR OBJECTID = \");\n          where = \"OBJECTID = \" + where;\n          return $.post(this.url + \"/deleteFeatures\", {where: where}).promise();\n        };\n        \n        /**\n         * обобщенный метод для получения promise для удаления объекта в сервисе esri\n         * @param id - OBJECTID удаляемого объекта\n         * @returns {*}\n         */\n        this.delById = function (id) {\n          return $.post(this.url + \"/deleteFeatures\", {where: \"OBJECTID = \" + id}).promise();\n        };\n        \n        /**\n         * обобщенный метод для получения первого объекта после разрешения promise через then(function(data){})\n         * @comment className.getByArray([1, 2, 3, 5]).then(function(data) { var firstFeature = className.first(data); })\n         * @param data - коллекция id удаляемых объектов\n         * @returns {*}\n         */\n        this.first = function (data) {\n          if ((data == null) || (data === undefined)) {\n            return protoFeature();\n          }\n          return data.features[0];\n        };\n        \n        /**\n         * обобщенный метод для получения последнего объекта после разрешения promise через then(function(data){})\n         * @comment className.getByArray([1, 2, 3, 5]).then(function(data) { var lastFeature = className.last(data); })\n         * @param data\n         * @returns {*}\n         */\n        this.last = function (data) {\n          if ((data == null) || (data === undefined)) {\n            return protoFeature();\n          }\n          return data.features[features.length - 1];\n        };\n        \n        /**\n         * обобщенный метод для получения всех объектов после разрешения promise через then(function(data){})\n         * @comment className.getByArray([1, 2, 3, 5]).then(function(data) { var features = className.all(data); })\n         * @param data\n         * @returns {*}\n         */\n        this.all = function (data) {\n          if ((data == null) || (data === undefined)) {\n            return [protoFeature()];\n          }\n          return data.features;\n        };\n        \n        /**\n         * обобщенный метод для получения всех объектов после разрешения promise через then(function(data){})\n         * @comment className.getByArray([1, 2, 3, 5]).then(function(data) { var features = className.all(data); })\n         * @param data\n         * @returns {*}\n         */\n        this.allByFilter = function (data, fieldName, value) {\n          if ((data == null) || (data === undefined)) {\n            return [protoFeature()];\n          }\n          var result = [];\n          for (var i = 0; i < data.features.length; i++) {\n            if (data.features[i].attributes[fieldName] == value) result.push(data.features[i]);\n          }\n          return result;\n        };\n        \n        /**\n         * Получение идентификатора объекта\n         * @param data = feature {attributes, geometry}\n         * @returns {*}\n         */\n        this.key = function (data) {\n          return data.attributes[\"OBJECTID\"];\n        };\n        \n        /**\n         * Получение идентификатора объекта, если он не равен OBJECTID\n         * @param data = feature {attributes, geometry}\n         * @param fieldName\n         * @returns {*}\n         */\n        this.keyByField = function (data, fieldName) {\n          return data.attributes[fieldName];\n        };\n        \n        this.refresh = function (data) {\n        };\n        \n        /**\n         * Возвращает прототип контейнера\n         * @param parentMRID\n         * @param chieldMRID\n         * @param parentClassName\n         * @param chieldClassName\n         * @param geometry\n         * @returns {{geometry: *, attributes: {parentMRID: *, chieldMRID: *, parentClassName: *, chieldClassName: *}}}\n         */\n        this.containerTemplate = function (parentMRID, chieldMRID, parentClassName, chieldClassName, geometry) {\n          return {\n            geometry:   geometry,\n            attributes: {\n              parentMRID:      parentMRID,\n              chieldMRID:      chieldMRID,\n              parentClassName: parentClassName,\n              chieldClassName: chieldClassName\n            }\n          }\n        };\n        /**\n         * Возвращает информацию по созданным объектам после операции редактирования\n         * @param data\n         * @returns {*}\n         */\n        this.getAdds = function (data) {\n          return data[0];\n        };\n        /**\n         * Возвращает информацию по обновленным объектам после операции редактирования\n         * @param data\n         * @returns {*}\n         */\n        this.getUpdates = function (data) {\n          return data[0];\n        };\n        /**\n         * Возвращает информацию по удаленным объектам после операции редактирования\n         * @param data\n         * @returns {*}\n         */\n        this.getDeletes = function (data) {\n          return data[1];\n        }\n      }\n    });\n    \n    return model;\n  });"]}